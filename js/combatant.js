class combatant{
	constructor(layer,x,y,type,weapon,team){
		this.layer=layer
		this.position={x:x,y:y}
		this.type=type
		this.team=team
		this.weapon=weapon
		this.size=1
		this.flip=1-this.team*2
		this.direction=0
		if(this.type==0){
			this.fade=0
		}else{
			this.fade=1
		}
		this.name=types.combatant[this.type].name
		this.life=types.combatant[this.type].life
		this.speed=types.combatant[this.type].speed
		this.damage=types.combatant[this.type].damage
		this.height=types.combatant[this.type].height
		this.attacks=[]
		for(g=0,lg=types.weapon[this.weapon].attacks.length;g<lg;g++){
			this.attacks.push(types.weapon[this.weapon].attacks[g])
		}
		for(g=0,lg=types.combatant[this.type].attacks.length;g<lg;g++){
			this.attacks.push(types.combatant[this.type].attacks[g])
		}
		this.uses=[]
		for(g=0,lg=this.attacks.length;g<lg;g++){
			this.uses.push(types.attack[this.attacks[g]].uses)
		}
		this.base={position:{x:this.position.x,y:this.position.y},life:this.life}
		this.collect={life:this.life}
		this.boost=[0,0,0]
		this.boostFade=[0,0,0]
		this.boostDisplay=[]
		this.boostColor=[[200,0,0],[0,150,255],[255,255,50]]
		this.boostInfoFade=[0,0,0]
		this.boostName=['Attack','Defense','Speed']
		this.status=[0,0,0]
		this.statusFade=[0,0,0]
		this.statusDisplay=[]
		this.statusColor=[[200,100,0],[255,255,150],[150,255,150]]
		this.statusInfoFade=[0,0,0]
		this.statusName=['Burned','Stun','Confused']
		this.infoFade=0
		this.rate=[0,0]
		this.stacking=this.speed
		this.anim=[0,0,0,0]
	}
	displayLife(){
		this.layer.translate(this.base.position.x,this.base.position.y)
		this.layer.noStroke()
		this.layer.fill(0,this.fade)
		this.layer.rect(0,20,62,10,5)
		this.layer.fill(150,this.fade)
		this.layer.rect(0,20,60,8,4)
		this.layer.fill(240,0,0,this.fade)
		this.layer.rect((max(0,this.collect.life)/this.base.life)*30-30,20,(max(0,this.collect.life)/this.base.life)*60,min((max(0,this.collect.life)/this.base.life)*120,8),4)
		this.layer.fill(min(255,510-max(0,this.life)/this.base.life*510)-max(0,5-max(0,this.life)/this.base.life*30)*25,max(0,this.life)/this.base.life*510,0,this.fade)
		this.layer.rect((max(0,this.life)/this.base.life)*30-30,20,(max(0,this.life)/this.base.life)*60,min((max(0,this.life)/this.base.life)*120,8),4)
		for(g=0,lg=this.boostDisplay.length;g<lg;g++){
			this.layer.fill(this.boostColor[this.boostDisplay[g]][0],this.boostColor[this.boostDisplay[g]][1],this.boostColor[this.boostDisplay[g]][2],this.boostFade[this.boostDisplay[g]]*this.fade)
			this.layer.ellipse(-21+g*14,50,12,12)
			this.layer.fill(150,this.fade*this.boostFade[this.boostDisplay[g]]*this.boostInfoFade[g])
			this.layer.rect(0,80,45,15,3)
		}
		for(g=0,lg=this.statusDisplay.length;g<lg;g++){
			this.layer.fill(this.statusColor[this.statusDisplay[g]][0],this.statusColor[this.statusDisplay[g]][1],this.statusColor[this.statusDisplay[g]][2],this.statusFade[this.statusDisplay[g]]*this.fade)
			this.layer.ellipse(-21+g*14,64,12,12)
			this.layer.fill(150,this.fade*this.statusFade[this.statusDisplay[g]]*this.statusInfoFade[g])
			this.layer.rect(0,80,45,15,3)
		}
		this.layer.fill(0,this.fade)
		this.layer.textSize(8)
		this.layer.text(max(0,ceil(this.life*10)/10)+"/"+max(0,ceil(this.base.life)),0,21)
		this.layer.textSize(10)
		this.layer.text(this.name,0,32)
		this.layer.text(types.weapon[this.weapon].name,0,40)
		for(g=0,lg=this.boostDisplay.length;g<lg;g++){
			this.layer.fill(0,this.boostFade[this.boostDisplay[g]]*this.fade)
			if(this.boost[this.boostDisplay[g]]>0){
				this.layer.text('+'+this.boost[this.boostDisplay[g]],-21+g*14,50)
			}else{
				this.layer.text(this.boost[this.boostDisplay[g]],-21+g*14,50)
			}
			this.layer.fill(0,this.fade*this.boostFade[this.boostDisplay[g]]*this.boostInfoFade[g])
			this.layer.text(this.boostName[this.boostDisplay[g]],0,80)
		}
		for(g=0,lg=this.statusDisplay.length;g<lg;g++){
			this.layer.fill(0,this.statusFade[this.statusDisplay[g]]*this.fade)
			this.layer.text(this.status[this.statusDisplay[g]],-21+g*14,64)
			this.layer.fill(0,this.fade*this.statusFade[this.statusDisplay[g]]*this.statusInfoFade[g])
			this.layer.text(this.statusName[this.statusDisplay[g]],0,80)
		}
		this.layer.translate(-this.base.position.x,-this.base.position.y)
	}
	display(){
		this.layer.translate(this.position.x,this.position.y)
		this.layer.rotate(this.direction)
		this.layer.scale(this.size*this.flip,this.size)
		switch(this.type){
			case 1:
				this.layer.stroke(80,this.fade)
				this.layer.strokeWeight(4)
				this.layer.line(-4,-30,-8-sin(this.rate[0]*2)*3,0)
				this.layer.line(4,-30,8+sin(this.rate[0]*2)*3,0)
				this.layer.line(-6*cos(this.rate[1]),-48,-15*cos(this.rate[1])+this.anim[0]*30+this.anim[1]*36,-24-this.anim[0]*12-this.anim[1]*30)
				this.layer.line(6*cos(this.rate[1]),-48,15*cos(this.rate[1])+this.anim[0]*15+this.anim[1]*12,-24-this.anim[0]*12-this.anim[1]*30)
				this.layer.noStroke()
				this.layer.fill(80,this.fade)
				this.layer.ellipse(0,-45,18,36)
				this.layer.fill(240,220,180,this.fade)
				this.layer.ellipse(0,-75,30,30)
				this.layer.fill(0,this.fade)
				this.layer.ellipse(4,-72,4,4)
				this.layer.ellipse(12,-72,4,4)
			break
			case 2:
				this.layer.stroke(80,this.fade)
				this.layer.strokeWeight(4)
				this.layer.line(-4,-30,-8-sin(this.rate[0]*2)*3,0)
				this.layer.line(4,-30,8+sin(this.rate[0]*2)*3,0)
				this.layer.line(-6*cos(this.rate[1]),-48,-15*cos(this.rate[1])+this.anim[0]*30+this.anim[1]*36,-24-this.anim[0]*12-this.anim[1]*30)
				this.layer.line(6*cos(this.rate[1]),-48,15*cos(this.rate[1])+this.anim[0]*15+this.anim[1]*12,-24-this.anim[0]*12-this.anim[1]*30)
				this.layer.noStroke()
				this.layer.fill(80,this.fade)
				this.layer.ellipse(0,-45,18,36)
				this.layer.fill(240,220,180,this.fade)
				this.layer.ellipse(0,-75,30,30)
				this.layer.fill(0,this.fade)
				this.layer.ellipse(4,-72,4,4)
				this.layer.ellipse(12,-72,4,4)
			break
			case 3:
				this.layer.stroke(80,this.fade)
				this.layer.strokeWeight(4)
				this.layer.line(-4,-30,-8-sin(this.rate[0]*2)*3,0)
				this.layer.line(4,-30,8+sin(this.rate[0]*2)*3,0)
				this.layer.line(-6*cos(this.rate[1]),-48,-15*cos(this.rate[1])+this.anim[0]*30+this.anim[1]*36,-24-this.anim[0]*12-this.anim[1]*30)
				this.layer.line(6*cos(this.rate[1]),-48,15*cos(this.rate[1])+this.anim[0]*15+this.anim[1]*12,-24-this.anim[0]*12-this.anim[1]*30)
				this.layer.noStroke()
				this.layer.fill(80,this.fade)
				this.layer.ellipse(0,-45,18,36)
				this.layer.fill(240,220,180,this.fade)
				this.layer.ellipse(0,-75,30,30)
				this.layer.fill(0,this.fade)
				this.layer.ellipse(4,-72,4,4)
				this.layer.ellipse(12,-72,4,4)
			break
			case 8:
				this.layer.noStroke()
				this.layer.fill(230,230,5,this.fade)
				this.layer.ellipse(-10-sin(this.rate[0]*2)*2,-8,20,20)
				this.layer.ellipse(10+sin(this.rate[0]*2)*2,-8,20,20)
				this.layer.ellipse(cos(this.anim[2])*-(16+this.anim[3])+this.anim[1]*24,-30+sin(this.anim[2])*-(16+this.anim[3])-this.anim[1]*6,20,20);
				this.layer.fill(235,235,55,this.fade)
				this.layer.ellipse(0,-28,24,40)
				this.layer.fill(240,240,60,this.fade)
				this.layer.ellipse(cos(this.anim[2])*(16+this.anim[3])+this.anim[1]*24,-30+sin(this.anim[2])*(16+this.anim[3])-this.anim[1]*6,20,20);
				this.layer.fill(245,245,65,this.fade)
				this.layer.ellipse(0,-60,40,40)
				this.layer.fill(240,160,20,this.fade);
				this.layer.ellipse(13.5,-52,24,16);
				this.layer.stroke(0,this.fade);
				this.layer.strokeWeight(1);
				this.layer.arc(13.5,-52,22,2,-180,0);
				this.layer.line(18-3,-56,18-3,-58);
				this.layer.line(18+3,-56,18+3,-58);
				this.layer.strokeWeight(3);
				this.layer.point(9-6,-64);
				this.layer.point(9+6,-64);
			break
			case 9: case 12:
				this.layer.stroke(80,this.fade)
				this.layer.strokeWeight(4)
				this.layer.line(-4,-30,-8-sin(this.rate[0]*2)*3,0)
				this.layer.line(4,-30,8+sin(this.rate[0]*2)*3,0)
				this.layer.line(-6*cos(this.rate[1]),-48,-15*cos(this.rate[1])+this.anim[0]*30+this.anim[1]*36,-24-this.anim[0]*12-this.anim[1]*30)
				this.layer.line(6*cos(this.rate[1]),-48,15*cos(this.rate[1])+this.anim[0]*15+this.anim[1]*12,-24-this.anim[0]*12-this.anim[1]*30)
				this.layer.noStroke()
				this.layer.fill(80,this.fade)
				this.layer.ellipse(0,-45,18,36)
				this.layer.fill(240,220,180,this.fade)
				this.layer.ellipse(0,-75,30,30)
				this.layer.fill(0,this.fade)
				this.layer.ellipse(4,-72,4,4)
				this.layer.ellipse(12,-72,4,4)
			break
			case 10:
				this.layer.stroke(80,this.fade)
				this.layer.strokeWeight(4)
				this.layer.line(-4,-30,-8-sin(this.rate[0]*2)*3,0)
				this.layer.line(4,-30,8+sin(this.rate[0]*2)*3,0)
				this.layer.line(-12*cos(this.rate[1]),-48,-24*cos(this.rate[1])+this.anim[0]*30+this.anim[1]*36,-24-this.anim[0]*12-this.anim[1]*30)
				this.layer.line(12*cos(this.rate[1]),-48,24*cos(this.rate[1])+this.anim[0]*15+this.anim[1]*12,-24-this.anim[0]*12-this.anim[1]*30)
				this.layer.noStroke()
				this.layer.fill(80,this.fade)
				this.layer.ellipse(0,-39,36,30)
				this.layer.fill(240,220,180,this.fade)
				this.layer.ellipse(0,-66,30,30)
				this.layer.fill(0,this.fade)
				this.layer.ellipse(4,-63,4,4)
				this.layer.ellipse(12,-63,4,4)
			break
			case 11:
				this.layer.stroke(80,this.fade)
				this.layer.strokeWeight(4)
				this.layer.line(-4,-36,-8-sin(this.rate[0]*2)*3,0)
				this.layer.line(4,-36,8+sin(this.rate[0]*2)*3,0)
				this.layer.line(-5*cos(this.rate[1]),-54,-12*cos(this.rate[1])+this.anim[0]*30+this.anim[1]*36,-24-this.anim[0]*12-this.anim[1]*30)
				this.layer.line(5*cos(this.rate[1]),-54,12*cos(this.rate[1])+this.anim[0]*15+this.anim[1]*12,-24-this.anim[0]*12-this.anim[1]*30)
				this.layer.noStroke()
				this.layer.fill(80,this.fade)
				this.layer.ellipse(0,-48,15,45)
				this.layer.fill(240,220,180,this.fade)
				this.layer.ellipse(0,-84,30,30)
				this.layer.fill(0,this.fade)
				this.layer.ellipse(4,-87,4,4)
				this.layer.ellipse(12,-87,4,4)
			break
		}
		this.layer.scale(1/this.size/this.flip,1/this.size)
		this.layer.rotate(-this.direction)
		this.layer.translate(-this.position.x,-this.position.y)
	}
	take(damage,spec){
		switch(spec){
			case 0:
				this.life-=damage/(2+max(0,this.boost[1]))*(2-min(0,this.boost[1]))
			break
			case 1:
				this.life-=damage/2*(2-min(0,this.boost[1]))
			break
		}
	}
	update(){
		this.boostDisplay=[]
		this.statusDisplay=[]
		for(g=0,lg=this.boost.length;g<lg;g++){
			if(this.boostFade[g]!=0){
				this.boostDisplay.push(g)
			}
			if(this.boostFade[g]<1&&this.boost[g]!=0){
				this.boostFade[g]=round(this.boostFade[g]*10+1)/10
			}
			if(this.boostFade[g]>0&&this.boost[g]==0){
				this.boostFade[g]=round(this.boostFade[g]*10-1)/10
			}
			this.boost[g]=constrain(this.boost[g],-4,4)
		}
		for(g=0,lg=this.status.length;g<lg;g++){
			if(this.statusFade[g]!=0){
				this.statusDisplay.push(g)
			}
			if(this.statusFade[g]<1&&this.status[g]!=0){
				this.statusFade[g]=round(this.statusFade[g]*10+1)/10
			}
			if(this.statusFade[g]>0&&this.status[g]==0){
				this.statusFade[g]=round(this.statusFade[g]*10-1)/10
			}
			this.status[g]=constrain(this.status[g],-100,100)
		}
		for(g=0,lg=this.boostDisplay.length;g<lg;g++){
			if(dist(inputs.rel.x,inputs.rel.y,this.position.x-21+g*14,this.position.y+50)<=6&&this.boostInfoFade[g]<1){
				this.boostInfoFade[g]+=1/10
			}else if(dist(inputs.rel.x,inputs.rel.y,this.position.x-21+g*14,this.position.y+50)>6&&this.boostInfoFade[g]>0){
				this.boostInfoFade[g]-=1/10
			}
		}
		for(g=0,lg=this.statusDisplay.length;g<lg;g++){
			if(dist(inputs.rel.x,inputs.rel.y,this.position.x-21+g*14,this.position.y+64)<=6&&this.statusInfoFade[g]<1){
				this.statusInfoFade[g]+=1/10
			}else if(dist(inputs.rel.x,inputs.rel.y,this.position.x-21+g*14,this.position.y+64)>6&&this.statusInfoFade[g]>0){
				this.statusInfoFade[g]-=1/10
			}
		}
		if(this.life<=0&&this.fade>0){
			this.fade-=1/30
		}
		this.collect.life=this.collect.life*0.9+this.life*0.1
	}
}